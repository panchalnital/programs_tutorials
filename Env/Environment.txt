Difference Between Development, Staging, and Prod Environment?

Development, Staging, and Production (Prod) environments are distinct phases in the software development and 
deployment process, each serving a specific purpose. Here's an overview of the key differences between them:

=> Development Environment:

Purpose: This environment is primarily used by developers during the coding and testing phase of 
        software development.

Characteristics:
Typically located on developers' local machines or dedicated development servers.
It's where coding, debugging, and unit testing occur.
May not be stable or reflect the exact configuration of the production environment.
Often used for experimenting with new features or changes without affecting the live application.

=> Staging Environment:

Purpose: Staging is a bridge between development and production, serving as a testing ground 
        for final pre-production testing.

Characteristics:
-Designed to closely mimic the production environment in terms of configuration and infrastructure.
-Used for integration testing, user acceptance testing (UAT), and performance testing before changes 
are deployed to the production environment.
-Ideally, it should be isolated from the public, accessible only to authorized personnel.

=> Production (Prod) Environment:

Purpose: The production environment is the live, operational environment where 
the software or application is accessible to end-users or customers.

Characteristics:
Hosts the live version of the software that customers use.
Must be highly stable, secure, and optimized for performance.
Any changes deployed here should undergo rigorous testing in the development and staging environments to minimize the risk of issues affecting users.

Key Takeaways:

Development is where coding and initial testing happen.
Staging closely resembles production and is for final testing.
Production is the live environment accessed by end-users.
Changes progress through these environments in a controlled manner to ensure quality and reliability.
It's essential to maintain clear separation between these environments to prevent issues from occurring in production and to provide a stable experience for users. Additionally, automated deployment and testing practices are often used to streamline the transition from development to staging and eventually to production.


DEV => SIT => UAT => Prod

DEV=> developers perform, unit testing
        (supports 10 developers working partcular sprin that all useing DEV branch write coding and testing on unit teston branch)
        (dev branch url using and tesing on branch all develop functionality working)

SIT(systemica intergration testing/Special Investigation Team) => developers provide separate environment to testers to testing
        (testers own branch that are working, users create and data testing brnach check all the testcases on branch, also was check on regrestion testing )
        (QA analysic teams one teans working one product another teams another product)

UAT(User Acceptance Testing) => developers provide separate environment for user to perform testing

Prod => after UAT verification code is branched t prod environment

LV => live verification is performed on prod environment as soon as code moves to production if something fails then roollback