PHP / Laravel:
Static methods
Abstract classes
Laravel Database migrations
Laravel Events
Laravel Jobs and Queues
PDOs
Design patterns (Abstract Factory, Singleton, Facade, etc.)
Laravel Mutators and Accessors
Database drivers in Laravel
Laravel Eloquent Relationships

JavaScript:
var/let difference
Event delegation
Callbacks
Asynchronous requests
Promises
Async/Await
Vue Lifecycle Hooks
Vue Watchers
Vue props
Vue events
Vue Component v-model

RDBMS:
Stored Procedures
Transactions
SQL injection prevention
Relationship types
Database Indexing

=====================================
https://www.youtube.com/watch?v=UFdv0DDVGrs&t=947s

https://www.youtube.com/watch?v=x4yQP4OcMCY&list=PL8p2I9GklV46wKSUuvqBsBtU1gv9gSKKG&index=13
1) Promises:
    What is promises
        4 javascript Promises
        [
            - you writen lot of code then the excute the this code 
                they take may be lot time take excuttion in case javascript not wait excuttion another code  
            - javascript is always synchronous and signle-threaded language,it means 
                javascript never wait for code or function result when they take sometime js direct c
                excute nexs code

        ]
    type for delacer two path promise
        i) promsing path(producing code)
            let data=new Promise(function(resolved,rejecte){
                resolved('done');
            });
        2) consuming code
            data.then((resp)=>{
                return resp;
            }).catch((error)=>{
                return error;
            });   

        3) promise chaning 

            let data=fetch("https://dummyjson.com/users");
          
            data.then((item)=>{
                return items.json();
            }).then((result)=>{
                console.log(result);
            });

        4) finally 
            both case working in finally () reject and resolve

            data.finally((item)=>{
                console.log("fianl");
            });

        5) promis.all 
                when where use 3 promise 1 promise take 1 second
                                        2 promise take 1 secon
                                        3 promise take 1 
                after all promise completd then display result or wise 
                    1 promise fail to display promise display error
         6)promise.allsettled : display how much promise fail and which promise is suuces all promose display result
            promise.race = frist which promise is excute that will display result
         lat data=Promise.all([
                new Promise(()=>{
                    setTimeout(()={
                    resolve("2 econde");
                    },2000);
                });
                    new Promise(()=>{
                    setTimeout(()={
                    resolve("2 econde");
                    },3000);
                });
                ]);

        :A promise in javascript is similar to a promise in real life
        :when we make a promise in real life it is a guarantee that we are going to do somthing in the future
        :beacuse promise can only be made for the future
        :a promise is an object there are 3 states of the succeeds or fail
            Pending: initial state before the promise succeed or ails
            Resloved:ompleted promise
            Rejected:fauiled promise
    
            code..
            **const myPromise=new Promise((resolved,rejected)=>{
                const a=2,b=2;
                const c=a+b;
                if(c===4){
                  resolved(`yes!, ${a} + ${b}=4`);
                }else{
                  rejected(`No! ${a} + $ {b} !=4`);
                }
              });
              
              myPromise.then((m)=>{
                console.log(m);
              }).catch((error)=>{
                console.log(error);
              })**
===================================
2) Event delegation
        [
            event means like onClick , onchange,onmouseover,onkeydown,onload

            event bubbling work like innerDive onclick call then middele and topdiv event call autoically in javascript is call event bubbling 
                but one case in inner event onclick and topdiv onchange event that time not working 

            if you use event.Propagation() that time not call paraent event (means stop the paraent click event)
            
        1) event.Propagation()
            function topDiv(){
                alert('TopDiv');
            }
            function middleDiv(){
                event.stopPropagation();
                alert('middleDiv');
            }
            function InnerDiv(){
                event.stopPropagation();
                alert('innerDiv');
            }
        ]

        2) 
            document.getElementById('greandparent').addEventListener('click',functio(){
                if(event.target.id="child"){
                    console.log("child clciked")
                }else if(event.target.id="parent"){
                    console.log("parent clciked")
                }else{
                     console.log("greandparent clciked")
                }
            });

        Event Delegation is basically a pattern to handle events efficiently. Instead of adding an event listener to each and every similar element, we can add an event listener to a parent element and call an event on a particular target using the .target property of the event object.

    Letâ€™s see an example with and without event delegation

    const customUI = document.createElement('ul');

    for (var i = 1; i <= 10; i++) {
        const newElement = document.createElement('li');
        newElement.textContent = "This is line " + i;
        newElement.addEventListener('click', () => {
            console.log('Responding')
        })
        customUI.appendChild(newElement);
}

============================
Async/Await
    [
        async mainly user javascript asyniconic working and not wait another code
        use await and not useed async geting error
        async user in function and body path not declaer any think return promise objects
        async user in function before prefix in body path muiltple await it can decaler
    ]

    Async/await in JavaScript is a powerful feature used for handling asynchronous code in a more synchronous-looking manner, making asynchronous code easier to read and write. Here's a brief explanation:

1. **Async Function**: 
   - An async function is a function declared with the `async` keyword before the function declaration. This keyword allows you to use the `await` keyword within the function body.
   - Async functions always return a promise. If the function returns a value, the promise will be resolved with that value. If the function throws an exception, the promise will be rejected with the thrown value.

2. **Await Operator**:
   - The `await` keyword can only be used inside an async function. It pauses the execution of the async function until the promise is settled (either fulfilled or rejected), and then resumes the async function's execution.
   - When awaiting a promise, the resolved value of the promise is returned. If the promise is rejected, an error will be thrown, which can be caught using try/catch.

Example:

```javascript
async function fetchData() {
  try {
    // The code here will pause until the promise returned by fetch resolves
    let response = await fetch('https://api.example.com/data');
    let data = await response.json();
    console.log(data);
  } catch (error) {
    console.error('Error fetching data:', error);
  }
}

fetchData();
```

In this example:
- `fetchData` is an async function that fetches data from an API.
- Inside `fetchData`, `await fetch(...)` pauses the execution until the HTTP request is complete and the promise returned by `fetch` is settled.
- Once the promise is resolved, `response.json()` returns another promise, which is also awaited to get the parsed JSON data.

Async/await simplifies the handling of asynchronous operations in JavaScript, especially when dealing with multiple asynchronous tasks or when chaining asynchronous operations.

===============================================
Vue Lifecycle Hooks

main.js 
    new vue.js() 
        |
        init 
    events & lifecycle
        |---------------[beforeCreater (component ceater )]
        init 
    injections & re-activity (data property bind in  )
        |---------------[created] 
        Has
        "el" option?------------No (when vm.$mount(El(entalal element)) is called)
        |
        |Yes
        |
        Has
    'Tamplate" option?---------No (compile el's outerHtml as template)
        |                             |
        |yes                          |
    Compoleteplate                    |
        into                          |
    render function                   |
        |-----------------------------
        |----------------[BeforeMount] (means component mount in dom )
    Create Vm.Sel
    and replace
    "el" with it
        |---------------- [mounted]
        |
        |
        |                                               beforeupdate
        |                                                    |
        mounted----------------Virtal Dom re-enderand patch--|
        |                                                    |
        |                                                   updated
        |
        when 
        vm.$destory
        is called
        |
        |---------------------[beforeDestory]
        |
    teardown
    watchers,child
    components and event
    listeners
        |
        |
        destory----------------[Destroyed]

===========================================
props

[
    props means child component to parent component data ecxhange means props(menas parent to child or child to parent componet data exchage) 
]

==========================

Vue events

<button v-on:click="test()">Click Me</button>
<button v-on:click="clickHandler"></button>   
<button @click="clickHandler"></button> 
v-on:submit.
v-on:keyup.
v-on:drag.
v-on:scroll.
v-on:error.
v-on:abort.
v-on:mouseover.
v-on:mouseout.

<script>
    export default{
        name:"home",
        method:{
            test(){
                alert("test eevnt");
            }
        }
    }
</script>