=> packages for authentication will be Passport
    composer requires laravel/Passport
    It generates a file(composer.json) in your project directory to keep track of all your packages. A default composer.json file of your laravel project will look something like below

=> php artisan make:controller      make controller file
=> php artisan make:model           Make a Model file
=> php artisan make:migration       Make Migration file
=> php artisan make:seeder          Make Seeder file
=> php artisan make:factory         Make Factory file
=> php artsian make:policy          Make Policy file
=> php artian make:command          Make a new artisan command

=> php artisan down                 maintenance mode om
=> php artisan up                   application again on live

=> php atisan make:migration createusertable  make migration file

    two methods used 
    1) up  php artisan migrate
        public function up(){
            schema::create('user',function(bludeprint $table)
            {
                $table->id();
                $table->string('name');
            });
        }
       
    2) down php artisan migrate:rollback
         public function down(){
            schema::dropifExits('user);
        }

=> php artisan migrate:rollback     only rolls back the previously run migration
=> php artisan migrate:reset        rollback all migrations
=> php artsian migrate:rfersh       rollback and run migrations
=> php artisan migrate:fersh        drop the tables first and then run migrations from the start

=> php artisan make:seeder usertableseeder      create a new Seeder
=> php artisan db:seed

=> php artisan make:factory UserFactory --class=User        create a new factor



=> model file 

     /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = []; // use the access in insert data in databse 
                            Specifies which fields can be mass assigned. For example, you can use the fill() method to mass assign fields.

    $guarded :  Specifies which fields can't be mass assigned. For example, if you use fill() with properties that are guarded, they won't be saved in the database.
    $hidden :   Specifies which fields won't be shown when a model is serialized to JSON or an array. The returned JSON will skip all fields mentioned in hidden.

=> Throttling is a process to rate-limit
    Route::middleware('auth:api','thottle:60,1')->group(function(){
        route::get('/user',function(){});
    });

=> facade :  facade is a class that wraps a non-static function and turns it into a static function. Facades provide a "static" interface to            classes that are available in the application's service container

    -> step 1 : app/facade
    invoice.php
    namespace App/facades;

    class Invoice{
        public functin companyName(){
            return 'ABC PVT LTD..';
        }
    }

    -> step 2 : app/facade

    invoice.php
    namespace App/facades;

    class InvoiceFacade{
        protected static functin getFacadeAccessor(){
            return 'Invoice';
        }
    }

-> step 3 : app/provide/appServiceProvider.php
        use App\Facades\Invoice;
        public function register(){
            $this->bind('Invoice',function($app){
                return new Invoice();
            });
        }
-> step 4 : config/app.php

        'aliases'=>
        [
            'Invoice' => App\facade\InvoiceFacade::class,
        ]
use 
    echo Invoice::companyName();

=> php artisan make:event Postcreated
=> php artisan make:listener NotifyUser
or
=> php artisan make:listener NotifyUser --event=Postcreated

=>Http request
    Interacting With The Request
        $request->input('name');
        $request->query('name')
        $request->string('name')->trim()
        $request->date('birthday')
        $request->merge(['votes' => 0]);
        $request->path();
        $request->header('X-Header-Name');
        $request->hasHeader('X-Header-Name')
         $request->ip();
        $request->getAcceptableContentTypes();
        $request->accepts(['text/html', 'application/json'])
        $request->expectsJson()
        $request->is('admin/*')
        $request->routeIs('admin.*'
        $request->url()
        $request->fullUrl()
        $request->host();
        $request->httpHost();
        $request->schemeAndHttpHost();

=>HTTP Responses
        response($content)
            ->header('Content-Type', $type)
            response('Hello World')->cookie
            response('Hello World')->withoutCookie('name')
            response()
            ->view('hello', $data, 200)
            response()->json()
            response()->download($pathToFile);
            response()->streamDownload();
            response()->file($pathToFile);

=> CSRF Protection
        //route call to the token
        Route::get('/token', function (Request $request) {
            $token = $request->session()->token();
            $token = csrf_token();
        });
        // from 
        @csrf

        // ajax 
        $.ajaxSetup({
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            }
        });

=> task scheduler
    php artisan make:command
    app/console/kernel.php


    notifaction class to add 
        implements shouldQueue

    creater the queue table 
        php artisan queue:table
        php artisan migrate 
    .env file set 
        queue_connection=syne/database

    php artisan queue:listen (display the which take currenlty working)
    php artisan queue:work 
